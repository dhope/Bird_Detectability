N <- round(Density_true*dim^2) # Number of birds to place on landscape
birds <- data.frame(x = runif(N,-dim/2,dim/2),
y = runif(N,-dim/2,dim/2))
# Distances to observer
birds$dist <- sqrt(birds$x^2 + birds$y^2)
# Remove birds outside maximum distance
birds <- subset(birds, dist <= (dim/2))
birds <- birds %>% arrange(dist)
birds$bird_id = 1:nrow(birds)
N = nrow(birds)
birds$dist <- birds$dist
# ------------------------------------
# Simulate bird cues, based on phi_true
# ------------------------------------
cues <- matrix(NA, nrow=N, ncol = 50)
for (bird_id in 1:N) cues[bird_id,] <- cumsum(rexp(ncol(cues),phi_true))
cues <- cues %>%
reshape2::melt() %>%
rename(bird_id = Var1, cue_number = Var2, time = value) %>%
arrange(bird_id,cue_number)
cues$dist <- birds$dist[cues$bird_id]
# ------------------------------------
# Determine which cues are detected, based on tau_true
# ------------------------------------
cues$p<- exp(-(cues$dist/tau_true)^2)  # Probability each cue is detected
cues$detected <- rbinom(nrow(cues),1,cues$p) # binary variable: was cue actually detected?
# ------------------------------------
# Isolate first detected cue for each bird
# ------------------------------------
dat <- subset(cues,detected == 1)
dat <- dat[!duplicated(dat$bird_id),]
# ------------------------------------
# Transcription: distance and time bins
# ------------------------------------
# Randomly select sampling protocol
rint <- sample(distance_protocols,1)[[1]]
tint <- sample(time_protocols,1)[[1]]
nrint <- length(rint)
ntint <- length(tint)
# Separate into distance and time bins
dat$rint <- cut(dat$dist,c(0,rint))
dat$tint <- cut(dat$time,c(0,tint))
dat <- na.omit(dat)
Y <- table(dat[,c("rint","tint")])
Y # Data to analyze
Yarray[k,1:nrint,1:ntint] <- Y
# print(k)
rarray[k,1:length(rint)] <- rint
tarray[k,1:length(tint)] <- tint
}
# ******************************************
# FIT MODEL TO SIMULATED DATA (only first 1000 point counts)
# ******************************************
Yarray_fit <- Yarray[1:1000,,]
rarray_fit <- rarray[1:1000,]
tarray_fit <- tarray[1:1000,]
X1_fit <- X1[1:1000,]
X2_fit <- X2[1:1000,]
start <- Sys.time()
fitcpp <- cmulti_fit_joint(Yarray_fit,
rarray_fit,
tarray_fit,
X1 = X1_fit, # Design matrix for tau
X2 = X2_fit  # Design matrix for phi
)
end <- Sys.time()
print(end-start) # 2.3 min
start <- Sys.time()
fit <- cmulti_fit_joint_slow(Yarray_fit,
rarray_fit,
tarray_fit,
X1 = X1_fit, # Design matrix for tau
X2 = X2_fit  # Design matrix for phi
)
end <- Sys.time()
print(end-start) # 2.3 min
start <- Sys.time()
fit$coefficients
fitcpp$coefficients
tau_est <- exp(X1 %*% fit$coefficients[1:2])
tau_estcpp <- exp(X1 %*% fitcpp$coefficients[1:2])
ggplot()+
geom_point(aes(x = covariate.FC,y=tau_est, col = "Estimate"))+
geom_point(aes(x = covariate.FC,y=tau_estcpp, col = "Estimate CPP"),
alpha = 0.5, size =0.5)+
geom_line(aes(x = covariate.FC,y=tau, col = "Truth"))+
xlab("Percent forest cover")+
ylab("Tau")+
scale_color_manual(values=c("dodgerblue",'grey', "black"), name = "")+
ggtitle("Predicted vs True Tau")+
theme_bw()
phi_est <- exp(X2 %*% fit$coefficients[3:5])
phi_est_cpp <- exp(X2 %*% fitcpp$coefficients[3:5])
ggplot()+
geom_point(aes(x = covariate.DOY,y=phi_est, col = "Estimate"))+
geom_point(aes(x = covariate.DOY,y=phi_est_cpp, col = "Estimate CPP"),
size = 0.5)+
geom_line(aes(x = covariate.DOY,y=phi, col = "Truth"))+
xlab("Day of year")+
ylab("Phi")+
scale_color_manual(values=c("dodgerblue","grey","black"), name = "")+
ggtitle("Predicted vs True Phi")+
theme_bw()
phi_est <- exp(X2 %*% fit$coefficients[3:5])
phi_est_cpp <- exp(X2 %*% fitcpp$coefficients[3:5])
ggplot()+
geom_point(aes(x = covariate.DOY,y=phi_est, col = "Estimate"))+
geom_point(aes(x = covariate.DOY,y=phi_est_cpp, col = "Estimate CPP"),
size = 0.5)+
geom_line(aes(x = covariate.DOY,y=phi, col = "Truth"))+
xlab("Day of year")+
ylab("Phi")+
scale_color_manual(values=c("dodgerblue","grey","black"), name = "")+
ggtitle("Predicted vs True Phi")+
theme_bw()
library(tidyverse)
library(ggpubr)
library(IlesShowUSomething)
set.seed(999)
load("results/CurrentEnv.RData")
bootsamps <- read_rds("results/bootstrapsample_14.rds")
source("E:/GitHUB_Clones/Bird_Detectability/QPAD/cmulti_fit_joint_cpp.R")
Yboot <- Yarray[bootsamps,,]
rboot <- rarray[bootsamps,]
tboot <- tarray[bootsamps,]
X1boot <- X1[bootsamps,]
X2boot <- X2[bootsamps,]
fit <- cmulti_fit_joint(Yboot,
rboot,
tboot,
X1 = X1boot, # Design matrix for tau
X2 = X2boot  # Design matrix for phi
)
X1
inits
nlimit <- c(.Machine$double.xmin, .Machine$double.xmax)^(1/3)
nlimit
Yarray_x = aperm(Yarray, c(2,3,1))
Yarray_x
Yarray_x[33,,,]
Yarray_x[33,,]
Yarray_x[,,33]
Yarray_x[32,,]
Yarray_x[,,32]
method
tau_params
nsurvey
Yarray_x
tarray
rarray
nrint
ntint
max_r
nlimit
Ysum
dim(Yarray_x)
Ysum
Ykeep
max(-Inf)
max(Inf)
tarray
max(tarray[1,1]
)
max(tarray[96,2])
inits
res <- optim(inits, nll_fun, method = method, hessian = TRUE,
X1=X1, X2=X2, tau_params=tau_params, nsurvey=nsurvey,
Yarray = Yarray_x,tarray= tarray, rarray=rarray,
nrint= nrint, ntint= ntint, max_r= max_r, Ysum=Ysum,nlimit= nlimit)
res
## robust matrix inversion (from detect pacakge)
.solvenear <- function(x) {
xinv <- try(solve(x), silent = TRUE)
if (inherits(xinv, "try-error"))
xinv <- as.matrix(solve(Matrix::nearPD(x)$mat))
xinv
}
rval <- list(input_data = input_data,
coefficients = res$par,
vcov = try(.solvenear(res$hessian)),
loglik = -res$value)
if (inherits(rval$vcov, "try-error")) rval$vcov <- matrix(NA, length(rval$coefficients), length(rval$coefficients))
rval$coefficients <- unname(rval$coefficients)
rval$vcov <- unname(rval$vcov)
rval$results <- res
rval
rval$vcov
res <- optim(inits, nll_fun, method = method, hessian = TRUE,
X1=X1, X2=X2, tau_params=tau_params, nsurvey=nsurvey,
Yarray = Yarray_x,tarray= tarray, rarray=rarray,
nrint= nrint, ntint= ntint, max_r= max_r, Ysum=Ysum,nlimit= nlimit)
res <- optim(inits, nll_fun, method = method, hessian = TRUE,
X1=X1, X2=X2, tau_params=tau_params, nsurvey=nsurvey,
Yarray = Yarray_x,tarray= tarray, rarray=rarray,
nrint= nrint, ntint= ntint, max_r= max_r, Ysum=Ysum,nlimit= nlimit)
res <- optim(inits, nll_fun, method = method, hessian = TRUE,
X1=X1, X2=X2, tau_params=tau_params, nsurvey=nsurvey,
Yarray = Yarray_x,tarray= tarray, rarray=rarray,
nrint= nrint, ntint= ntint, max_r= max_r, Ysum=Ysum,nlimit= nlimit)
Yarray_x = aperm(Yarray, c(2,3,1))
res <- optim(inits, nll_fun, method = method, hessian = TRUE,
X1=X1, X2=X2, tau_params=tau_params, nsurvey=nsurvey,
Yarray = Yarray_x,tarray= tarray, rarray=rarray,
nrint= nrint, ntint= ntint, max_r= max_r, Ysum=Ysum,nlimit= nlimit)
nrint
ntint
res <- optim(inits, nll_fun, method = method, hessian = TRUE,
X1=X1, X2=X2, tau_params=tau_params, nsurvey=nsurvey,
Yarray = Yarray_x,tarray= tarray, rarray=rarray,
nrint= nrint, ntint= ntint, max_r= max_r, Ysum=Ysum,nlimit= nlimit)
res <- optim(inits, nll_fun, method = method, hessian = TRUE,
X1=X1, X2=X2, tau_params=tau_params, nsurvey=nsurvey,
Yarray = Yarray_x,tarray= tarray, rarray=rarray,
nrint= nrint, ntint= ntint, max_r= max_r, Ysum=Ysum,nlimit= nlimit)
range(tint)
tint
ntint
ntint |> range()
max_r
max_r |> range9)
max_r |> range()
res <- optim(inits, nll_fun, method = method, hessian = TRUE,
X1=X1, X2=X2, tau_params=tau_params, nsurvey=nsurvey,
Yarray = Yarray_x,tarray= tarray, rarray=rarray,
nrint= nrint, ntint= ntint, max_r= max_r, Ysum=Ysum,nlimit= nlimit)
nrint |> range()
ntint |> range()
# list2env(readr::read_rds("dev/testingdat.rds"), envir = environment())
load("dev/BreakingBad.RData")
Yarray_x = aperm(Yarray, c(2,3,1))
nlimit <- c(.Machine$double.xmin, .Machine$double.xmax)^(1/3)
# Rcpp::sourceCpp("joing_funs_dh_testing.cpp")
library(IlesShowUSomething)
runs <- matrix(runif(1e4, -1,1),ncol = 5)
write_rds(runs, 'dev/runs.rds')
readr::write_rds(runs, 'dev/runs.rds')
job::job(... = {out <- purrr::map_dbl(1:nrow(runs),
~{print(.x);nll_fun(runs[.x,], X1, X2, tau_params, nsurvey,
Yarray_x, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )}
)}, import = 'all')
runs <- read_rds("dev/runs.rds")
runs <- readr::read_rds("dev/runs.rds")
runs[33,]
job::job({nll_fun(runs[33,], X1, X2, tau_params, nsurvey,
Yarray_x, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )})
nll_fun(runs[33,], X1, X2, tau_params, nsurvey,
Yarray_x, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )
runs[33,]
for(i in 1:100){
nll_fun(runs[33,], X1, X2, tau_params, nsurvey,
Yarray_x, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )}
nrow(runs)
#
runs <- readr::read_rds("dev/runs.rds")
runs[33,]
#
# for(i in 1:100){
nll_fun(runs[33,], X1, X2, tau_params, nsurvey,
Yarray_x, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )
#
# for(i in 1:100){
nll_fun(runs[33,], X1, X2, tau_params, nsurvey,
Yarray_x, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )
#
# for(i in 1:100){
nll_fun(runs[33,], X1, X2, tau_params, nsurvey,
Yarray_x, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )
# list2env(readr::read_rds("dev/testingdat.rds"), envir = environment())
load("dev/BreakingBad.RData")
Yarray_x = aperm(Yarray, c(2,3,1))
nlimit <- c(.Machine$double.xmin, .Machine$double.xmax)^(1/3)
# Rcpp::sourceCpp("joing_funs_dh_testing.cpp")
library(IlesShowUSomething)
#
runs <- readr::read_rds("dev/runs.rds")
runs[32,]
k <- 63
Yarray_x[63,,]
Yarray_x[,,63]
Ysum[63]
tau_params
tarray[k]
tarray[k,]
rarray[k,]
nrint
nrint[k]
rarray[k,]
ntint[k]
tarray[k,]
X1[k,]
X2[k,]
runs[32,]
X1[k,] %*% runs[32,1:2]
tau_est <- X1[k,] %*% runs[32,1:2]
phi_est <- X2[k,] %*% runs[32,3:5]
phi_est
max_r[k]
apply(rarray,1,max,na.rm = TRUE)
rarray[k,]
max_r[k]
std::cout<< "Integrate done" <<std::endl;
# list2env(readr::read_rds("dev/testingdat.rds"), envir = environment())
load("dev/BreakingBad.RData")
Yarray_x = aperm(Yarray, c(2,3,1))
nlimit <- c(.Machine$double.xmin, .Machine$double.xmax)^(1/3)
# Rcpp::sourceCpp("joing_funs_dh_testing.cpp")
library(IlesShowUSomething)
# runs <- matrix(runif(1e4, -1,1),ncol = 5)
# readr::write_rds(runs, 'dev/runs.rds')
runs <- readr::read_rds("dev/runs.rds")
runs[31,]
# list2env(readr::read_rds("dev/testingdat.rds"), envir = environment())
load("dev/BreakingBad.RData")
Yarray_x = aperm(Yarray, c(2,3,1))
nlimit <- c(.Machine$double.xmin, .Machine$double.xmax)^(1/3)
# Rcpp::sourceCpp("joing_funs_dh_testing.cpp")
library(IlesShowUSomething)
# runs <- matrix(runif(1e4, -1,1),ncol = 5)
# readr::write_rds(runs, 'dev/runs.rds')
runs <- readr::read_rds("dev/runs.rds")
Yarray_x[,,119]
Yarray_x[,,118]
Yarray_x[,,117]
# list2env(readr::read_rds("dev/testingdat.rds"), envir = environment())
load("dev/BreakingBad.RData")
Yarray_x = aperm(Yarray, c(2,3,1))
Yarray[119,,]
Yarray_x[,,119]
dim(Yarray_x)
nsurvey
Yarray_x[,,120]
Yarray_x[,,k]
k <- 120
Yarray_x[,,k]
Ysum[k]
ntint[k]
tarray[k,]
nrint[k]
rarray[k,]
max_r[k]
tau_est <- X1[k,] %*% runs[32,1:2]
phi_est <- X2[k,] %*% runs[32,3:5]
#
runs <- readr::read_rds("dev/runs.rds")
runs[32,]
remotes::update_packages()
# list2env(readr::read_rds("dev/testingdat.rds"), envir = environment())
load("dev/BreakingBad.RData")
Yarray_x = aperm(Yarray, c(2,3,1))
nlimit <- c(.Machine$double.xmin, .Machine$double.xmax)^(1/3)
# Rcpp::sourceCpp("joing_funs_dh_testing.cpp")
library(IlesShowUSomething)
# runs <- matrix(runif(1e4, -1,1),ncol = 5)
# readr::write_rds(runs, 'dev/runs.rds')
runs <- readr::read_rds("dev/runs.rds")
vec <- c(Yarray_x)
vecno_NA <- vec[!is.na(vec)]
for(k in 1:(nsurvey)){
for(i in 1:(nrint[k])){
for(j in 1:(ntint[k])){
cat(vec[addr(k-1,i-1,j-1, nsurvey, nrint, ntint)+1])
print(Yarray[k,i,j])
}
}
}
cat(vec[addr(i-1,j-1,k-1, nsurvey, nrint, ntint)+1])
for(k in 1:(nsurvey)){
for(i in 1:(nrint[k])){
for(j in 1:(ntint[k])){
cat(vec[addr(i-1,j-1,k-1, nsurvey, nrint, ntint)+1])
print(Yarray[k,i,j])
}
}
}
vec
Yarray_x[1,,]
Yarray_x[,,1]
vec
load("dev/BreakingBad.RData")
Yarray_x = aperm(Yarray, c(2,3,1))
nlimit <- c(.Machine$double.xmin, .Machine$double.xmax)^(1/3)
# Rcpp::sourceCpp("joing_funs_dh_testing.cpp")
library(IlesShowUSomething)
# runs <- matrix(runif(1e4, -1,1),ncol = 5)
# readr::write_rds(runs, 'dev/runs.rds')
runs <- readr::read_rds("dev/runs.rds")
# t1 <- nll_fun(inits, X1, X2, tau_params, nsurvey, Yarray_x, tarray, rarray, nrint, ntint, max_r, Ysum, nlimit )
# t2 <- nll.fun(inits)
# t1
# t2
# # print(t1,t2)
# t1$true/sum(t1$true)
# t2[[1]]-t1$CDF_binned
# t2[[2]]-t1$tmp1
# t2[[3]]-t1$p_matrix
#
# for(k in 1:nsurvey){
#   Y <- Yarray[k,,]
#   nrow(Y) == nrint[k]
for(k in 1:(nsurvey)){
for(i in 1:(nrint[k])){
for(j in 1:(ntint[k])){
cat(vec[addr(i-1,j-1,k-1, nsurvey, max(nrint), )+1])
print(Yarray[k,i,j])
}
}
}
vec <- c(Yarray_x)
vecno_NA[addr(0,1,0, nsurvey, max(nrint) )+1]
vecno[addr(0,1,0, nsurvey, max(nrint) )+1]
vec[addr(0,1,0, nsurvey, max(nrint) )+1]
Yarray[1,2,1]
vec <- c(Yarray)
vec[addr(0,1,0, nsurvey, max(nrint) )+1]
Yarray[1,2,1]
addr(0,1,0, nsurvey, max(nrint)
)
vec
vec <- c(Yarray_x)
vec
vec <- c(Yarray)
vec[addr(0,1,0, nsurvey, max(nrint) )+1]
vec[addr(0,1,0, nsurvey, max(nrint) )]
Yarray[1,2,1]
for(k in 1:(nsurvey)){
for(i in 1:(nrint[k])){
for(j in 1:(ntint[k])){
cat(vec[addr(i-1,j-1,k-1, nsurvey, max(nrint), )])
print(Yarray[k,i,j])
}
}
}
cat(vec[addr(i-1,j-1,k-1, nsurvey, max(nrint) )])
out <- TRUE
for(k in 1:(nsurvey)){
for(i in 1:(nrint[k])){
for(j in 1:(ntint[k])){
cat(vec[addr(i-1,j-1,k-1, nsurvey, max(nrint) )])
print(Yarray[k,i,j])
}
}
}
addr(i-1,j-1,k-1, nsurvey, max(nrint) )
vec[addr(i-1,j-1,k-1, nsurvey, max(nrint) )]
for(k in 1:(nsurvey)){
for(i in 1:(nrint[k])){
for(j in 1:(ntint[k])){
cat(vec[addr(k-1,i-1,j-1, nsurvey, max(nrint) )])
print(Yarray[k,i,j])
}
}
}
dim(Yarray)
dim(Yarray_x)
vec[addr(k-1,i-1,j-1, nsurvey, max(nrint) )]
addr(k-1,i-1,j-1, nsurvey, max(nrint) )]
cat(vec[addr(k,i,j, nsurvey, max(nrint) )])
print(Yarray[k,i,j])
Yarray
Yarray[k,,]
addr(0,0,0, nsurvey, max(nrint) )
addr(0,0:10,1, nsurvey, max(nrint) )
addr(0,1,1, nsurvey, max(nrint) )
addr(0,1,0, nsurvey, max(nrint) )
Yarray
vec
vec <- c(Yarray_x)
vec
addr(0,1,0, nsurvey, max(nrint) )
vec <- c(Yarray)
addr(0,1,0, nsurvey, max(nrint) )
vec[642]
addr(0,2,0, nsurvey, max(nrint) )
addr(0,1,2, nsurvey, max(nrint) )
max(nrint)
vec
addr(0,1,2, nsurvey, max(nrint) )
vec[addr(0,1,2, nsurvey, max(nrint) )]
vec[addr(0,1,2, nsurvey, max(nrint) )+1]
addr(0)
vec
Yarray[1,,,]
Yarray[1,,]
Yarray[2,,]
Yarray[3,,]
Yarray[3,1,1]
Yarray[addr(2, 0,0)+1]
vec[addr(2, 0,0)+1]
vec[addr(2, 0,0, nsurvey, max(nrint) )+1]
Yarray[3,1,1]
vec[addr(2, 1,0, nsurvey, max(nrint) )+1]
Yarray[3,2,1]
Yarray[4,2,1]
Yarray[4,1,1]
vec[addr(3, 0,0, nsurvey, max(nrint) )+1]
nll_fun(runs[.x,], X1, X2, tau_params, nsurvey,
vec, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )
.x <- 1
nll_fun(runs[.x,], X1, X2, tau_params, nsurvey,
vec, tarray, rarray, nrint,
ntint, max_r, Ysum, nlimit )
vec
vec[addr(3, 0,0, nsurvey, max(nrint) )+1]
Yarray[4,1,1]
